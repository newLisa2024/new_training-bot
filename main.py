import threading
from statistics_text import *
import pandas as pd
import matplotlib.pyplot as plt
import os
import schedule
import threading
import time
import sqlite3
from datetime import datetime, timedelta
import telebot
from telebot import types
import telebot
import os
import subprocess
from openai import OpenAI

from PIL import Image
import io

import telebot
from datetime import datetime
import time
import random
from config import BOT_TOKEN, params, STICKER_CAT, STICKER_SUCCESS, STICKER_HR, WHISPER_API, PROXY_API
from GetCourse_Backend import *
from db import *
from Frontend import *
from Backend import *
from WORKING_individual_user_graph import *
import logging
from PIL import Image

# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
#init_database()

#–£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–ï–ö–£–ù–î–´ –ù–ê –¢–ê–ô–ú–ï–†
timer_seconds = 120

bot = telebot.TeleBot(BOT_TOKEN)
print("bot has started", datetime.now())



tdb = Training_db()


#–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑, –º–µ–Ω—è–µ—Ç —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ù–µ—Ç –Ω–∞ –ú–∏–∫—Å
tdb.change_question_topics()

#–ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º
list_of_topics = tdb.get_all_topics()

print(list_of_topics)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.ERROR, filename='bot_errors.log', filemode='a',
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')





def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.error(f"Error in {func.__name__}: {e}", exc_info=True)
            call = kwargs.get('call') or args[0]
            keyboard = create_inline_keyboard(['test_mode', 'statistics'])
            if isinstance(call, telebot.types.CallbackQuery):
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=keyboard)
            else:
                bot.send_message(call.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=keyboard)
    return wrapper

#@error_handler
#def create_inline_keyboard(button_keys):
#    keyboard = types.InlineKeyboardMarkup(row_width=2)
#    buttons = [types.InlineKeyboardButton(text=buttons_dict[key], callback_data=key) for key in button_keys if key in buttons_dict]
#    keyboard.add(*buttons)
#    return keyboard

@error_handler
def create_inline_keyboard(button_keys):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for key in button_keys:
        if key in buttons_dict:
            buttons.append(types.InlineKeyboardButton(text=buttons_dict[key], callback_data=key))
        else:
            if key.startswith('skip_question_'):
                buttons.append(types.InlineKeyboardButton(text='‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=key))
            elif key.startswith('see_answer_'):
                buttons.append(types.InlineKeyboardButton(text='üëÄ –û—Ç–≤–µ—Ç', callback_data=key))
            elif key.startswith('next_question_'):
                buttons.append(types.InlineKeyboardButton(text='‚ùì –°–ª–µ–¥—É—é—â–∏–π', callback_data=key))
    keyboard.add(*buttons)
    return keyboard


def remove_timer_message(chat_id, message_id):
    time.sleep(timer_seconds)
    current_questions = read_current_questions(chat_id)
    stored_message_id = current_questions.get("timer_message_id")

    # Check if the message ID matches the stored timer message ID
    if message_id == stored_message_id:
        try:
            bot.delete_message(chat_id, message_id)
            current_questions["timer_message_id"] = None  # Update to None once deleted
            write_current_questions(chat_id, current_questions)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º: {e}")

@error_handler
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    print(user_id)

     #–µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ–º /start
    try:# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_questions = read_current_questions(user_id)
        current_questions["state"] = "None"
        write_current_questions(user_id, current_questions)
        param_text = message.text.split()[1]
    except IndexError:
        bot.reply_to(message, "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ ZeroCoder")
        return


    #–µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–≤–µ–¥–µ–Ω, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
    if param_text not in params:
        bot.reply_to(message, "–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É.")
        return

    #–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    tdb.add_user(user_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if tdb.has_user_answered(user_id):
        keyboard = create_inline_keyboard(['test_mode', 'statistics'])
    else:
        keyboard = create_inline_keyboard(['test_mode'])
    bot.send_message(message.chat.id, start_message, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'test_mode')
@error_handler
def handle_test_mode(call):
    user_id = call.from_user.id
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_questions = read_current_questions(user_id)
        current_questions["state"] = "None"
        write_current_questions(user_id, current_questions)
        user_status = tdb.is_user_in_db(user_id)
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π (is_active = 0),
        # –æ–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—É —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        if user_status == 0:
            keyboard = create_inline_keyboard(['menu'])
            bot.send_message(call.message.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É.', reply_markup=keyboard)
            return
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return

    keyboard = create_inline_keyboard(['all_questions', 'choose_topic', 'menu'])
    bot.send_message(call.message.chat.id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É?", reply_markup=keyboard)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

@bot.callback_query_handler(func=lambda call: call.data == 'menu')
@error_handler
def handle_menu(call):
    user_id = call.from_user.id

    current_questions = read_current_questions(user_id)

    if not current_questions.get("state").startswith("None_"):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        remove_timer_message_if_needed_for_call(call, user_id)

    current_questions = read_current_questions(user_id)
    current_questions["state"] = "None"
    write_current_questions(user_id, current_questions)
    user_status = tdb.is_user_in_db(user_id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = create_inline_keyboard(['test_mode', 'statistics'])
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'all_questions')
@error_handler
def handle_all_questions(call):
    filename = None
    user_id = call.from_user.id
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_questions = read_current_questions(user_id)
        current_questions["state"] = "all_questions"
        write_current_questions(user_id, current_questions)
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        correct_answers_count, total_questions_count = tdb.get_correct_answers_count(user_id, "all")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        filename = draw_progress_bar(user_id, correct_answers_count, total_questions_count, 'all')
        bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n–°–≤–æ–π –æ—Ç–≤–µ—Ç –í—ã –º–æ–∂–µ—Ç–µ –∫–∞–∫'
                                               f' –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞, —Ç–∞–∫ –∏ –Ω–∞–¥–∏–∫—Ç–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–º.\n\n–í–∞—à –æ—Ç–≤–µ—Ç '
                                               f'–±–µ–∂–∏—Ç –≤ ChatGPT 3.5 —á–µ—Ä–µ–∑ 96 —Å–ª–æ–µ–≤ –∏ 175'
                                               f' –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ '
                                               f'—Ç–µ—Ä–ø–µ–ª–∏–≤—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ '
                                               f'–≤—Ä–µ–º–µ–Ω–∏.\n\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:')
        time.sleep(2)

        with open(filename, 'rb') as photo:
            bot.send_photo(call.message.chat.id, photo)


        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        #time.sleep(1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if correct_answers_count == total_questions_count:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            sticker_id = STICKER_HR  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä–∞
            bot.send_sticker(user_id, sticker_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            repeat_button = types.InlineKeyboardButton(text='‚Ü∫ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data=f'repeat_all')
            choose_button = types.InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü≤', callback_data='menu')
            keyboard.add(repeat_button, choose_button)
            bot.send_message(call.message.chat.id,
                             f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞. –ü–æ—Ä–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å".',
                             reply_markup=keyboard)
            return


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF —Ç–∞–π–º–µ—Ä–∞
        gif_path = 'GIF_timer/countdown.gif'
        with open(gif_path, 'rb') as gif:
            msg = bot.send_animation(call.message.chat.id, gif)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ –≤—Ä–µ–º—è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
        current_questions = read_current_questions(user_id)
        current_questions["timer_message_id"] = msg.message_id
        current_questions["timer_start_time"] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        write_current_questions(user_id, current_questions)



        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        threading.Thread(target=remove_timer_message, args=(call.message.chat.id, msg.message_id)).start()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON —Ñ–∞–π–ª–∞
        current_questions = read_current_questions(user_id)



        key = f"all_{user_id}"
        if key not in current_questions["questions"] or not current_questions["questions"][key]:
            current_questions["questions"][key] = tdb.get_list_of_10_questions(user_id, "all")
            write_current_questions(user_id, current_questions)

        if not current_questions["questions"][key]:
            keyboard = create_inline_keyboard(['menu'])
            bot.send_message(call.message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –í–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!", reply_markup=keyboard)
            return



        # –í—ã–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_to_send = random.choice(current_questions["questions"][key])
        question_id, question_text = question_to_send
        keyboard = create_inline_keyboard(['skip_question_all', 'see_answer_all', 'menu'])
        bot.send_message(call.message.chat.id, f'–í–æ–ø—Ä–æ—Å:\n\n‚ùì{question_text}\n\n`', reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º question_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_questions["last_question_id"] = question_id
        current_questions["last_question_text"] = question_text
        write_current_questions(user_id, current_questions)



        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
        remove_question_from_all_lists(user_id, question_id)



    except Exception as e:
        bot.send_message(call.message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

    finally:
        if filename and os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as remove_error:
                bot.send_message(call.message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {remove_error}')

@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_topic'))
@error_handler
def choose_topic(call):
    global list_of_topics
    user_id = call.from_user.id
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_questions = read_current_questions(user_id)
    current_questions["state"] = "None"
    write_current_questions(user_id, current_questions)

    if not list_of_topics:
        bot.send_message(call.message.chat.id, "–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    _, page = call.data.split(':') if ':' in call.data else ('choose_topic', '0')
    page = int(page)

    topics_per_page = 8
    start = page * topics_per_page
    end = start + topics_per_page
    topics = list_of_topics[start:end]

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–º–∞–º–∏
    button_keys = [f'topic_{i}' for i in range(start, end) if i < len(list_of_topics)]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=topics[i - start], callback_data=button_keys[i - start]) for i in range(start, end) if i < len(list_of_topics)]
    keyboard.add(*buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton(text=buttons_dict['left'], callback_data=f'choose_topic:{page-1}'))
    if end < len(list_of_topics):
        nav_buttons.append(types.InlineKeyboardButton(text=buttons_dict['right'], callback_data=f'choose_topic:{page+1}'))

    if nav_buttons:
        keyboard.add(*nav_buttons)

    keyboard.add(types.InlineKeyboardButton(text=buttons_dict['menu'], callback_data='menu'))

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã (–ø—Ä–∏–º–µ—Ä)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('topic_'))
@error_handler
def topic_selected(call):
    global list_of_topics
    filename = None
    user_id = call.from_user.id
    try:


        topic_index = int(call.data.split('_')[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        topic_name = list_of_topics[topic_index]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_questions = read_current_questions(user_id)
        current_questions["state"] = f"topic_{topic_index}"

        write_current_questions(user_id, current_questions)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
        correct_answers_count, total_questions_count = tdb.get_correct_answers_count(user_id, topic_name)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        filename = draw_progress_bar(user_id, correct_answers_count, total_questions_count, topic_name)
        bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: "{topic_name}".\n\n–°–≤–æ–π '
                                               f'–æ—Ç–≤–µ—Ç –í—ã –º–æ–∂–µ—Ç–µ –∫–∞–∫ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞, —Ç–∞–∫ –∏'
                                               f' –Ω–∞–¥–∏–∫—Ç–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–º.\n\n–í–∞—à –æ—Ç–≤–µ—Ç '
                                               f'–±–µ–∂–∏—Ç –≤ ChatGPT 3.5 —á–µ—Ä–µ–∑ 96 —Å–ª–æ–µ–≤ –∏ 175'
                                               f' –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ '
                                               f'—Ç–µ—Ä–ø–µ–ª–∏–≤—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ '
                                               f'–≤—Ä–µ–º–µ–Ω–∏.\n\n –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:')
        time.sleep(2)

        with open(filename, 'rb') as photo:
            bot.send_photo(call.message.chat.id, photo)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        #time.sleep(1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if correct_answers_count == total_questions_count:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            sticker_id = STICKER_SUCCESS  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä–∞
            bot.send_sticker(user_id, sticker_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            repeat_button = types.InlineKeyboardButton(text='‚Ü∫ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data=f'repeat_{topic_index}')
            choose_button = types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É', callback_data='choose_topic')
            keyboard.add(repeat_button, choose_button)
            bot.send_message(call.message.chat.id,
                             f'üöÄ –í—ã - –ø—Ä–∏–º–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ–º—ã "{topic_name}". –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å".',
                             reply_markup=keyboard)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF —Ç–∞–π–º–µ—Ä–∞
        gif_path = 'GIF_timer/countdown.gif'
        with open(gif_path, 'rb') as gif:
            msg = bot.send_animation(call.message.chat.id, gif)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ –≤—Ä–µ–º—è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
        current_questions = read_current_questions(user_id)
        current_questions["timer_message_id"] = msg.message_id
        current_questions["timer_start_time"] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        write_current_questions(user_id, current_questions)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        threading.Thread(target=remove_timer_message, args=(call.message.chat.id, msg.message_id)).start()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON —Ñ–∞–π–ª–∞
        current_questions = read_current_questions(user_id)



        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ

        key = f"{topic_name}_{user_id}"
        if key not in current_questions["questions"] or not current_questions["questions"][key]:
            current_questions["questions"][key] = tdb.get_list_of_10_questions(user_id, topic_name)
            write_current_questions(user_id, current_questions)

        if not current_questions["questions"][key]:
            try:
                timer_message_id = current_questions.get("timer_message_id")
                if timer_message_id:
                    bot.delete_message(call.message.chat.id, timer_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º: {e}")
            keyboard = create_inline_keyboard(['choose_topic', 'menu'])
            bot.send_message(call.message.chat.id,
                             "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –í–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!",
                             reply_markup=keyboard)
            return



        # –í—ã–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_to_send = random.choice(current_questions["questions"][key])
        question_id, question_text = question_to_send
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        skip_button_key, skip_button_text = create_skip_question_button(topic_index)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏

        see_answer_key, see_answer_text = create_see_answer_button(topic_index)

        keyboard = create_inline_keyboard([skip_button_key, see_answer_key, 'menu'])



        bot.send_message(call.message.chat.id, f'–í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ "{topic_name}":\n\n‚ùì{question_text}\n\n `',
                         reply_markup=keyboard)


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º question_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_questions["last_question_id"] = question_id
        current_questions["last_question_text"] = question_text
        write_current_questions(user_id, current_questions)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
        remove_question_from_all_lists(user_id, question_id)

    except Exception as e:
        bot.send_message(call.message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

    finally:
        if filename and os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as remove_error:
                bot.send_message(call.message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {remove_error}')




def remove_timer_message_if_needed_for_call(call, user_id):
    current_questions = read_current_questions(user_id)
    timer_message_id = current_questions.get("timer_message_id")
    timer_start_time = current_questions.get("timer_start_time")

    if timer_message_id and timer_start_time:
        timer_start_time = datetime.strptime(timer_start_time, '%Y-%m-%d %H:%M:%S')
        if (datetime.now() - timer_start_time).total_seconds() < timer_seconds:
            try:
                chat_id = call.message.chat.id
                bot.delete_message(chat_id, timer_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º: {e}")


def remove_timer_message_if_needed_for_message(message, user_id):
    current_questions = read_current_questions(user_id)
    timer_message_id = current_questions.get("timer_message_id")
    timer_start_time = current_questions.get("timer_start_time")

    if timer_message_id and timer_start_time:
        timer_start_time = datetime.strptime(timer_start_time, '%Y-%m-%d %H:%M:%S')
        if (datetime.now() - timer_start_time).total_seconds() < timer_seconds:
            try:
                chat_id = message.chat.id
                bot.delete_message(chat_id, timer_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º: {e}")





@bot.callback_query_handler(func=lambda call: call.data.startswith('skip_question'))
@error_handler
def handle_skip_question(call):

    user_id = call.from_user.id
    today_date = datetime.now().strftime('%Y-%m-%d')

    try:


        topic_index = int(call.data.split('_')[2]) if call.data != 'skip_question_all' else 'all'

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_questions = read_current_questions(user_id)
        current_questions["state"] = f"skip_question_{topic_index}"
        write_current_questions(user_id, current_questions)

        topic_name = list_of_topics[topic_index] if topic_index != 'all' else 'all'
        current_questions = read_current_questions(user_id)
        question_id = current_questions.get("last_question_id")


        if question_id is None:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É Answers
        tdb.add_skipped_question(user_id, question_id, today_date)

        bot.send_message(call.message.chat.id, "–í–æ–ø—Ä–æ—Å –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        remove_timer_message_if_needed_for_call(call, user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
        key = f"all_{user_id}" if topic_index == 'all' else f"{topic_name}_{user_id}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
        if not current_questions["questions"][key]:
            current_questions["questions"][key] = tdb.get_list_of_10_questions(user_id, topic_name)
            write_current_questions(user_id, current_questions)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF —Ç–∞–π–º–µ—Ä–∞
        gif_path = 'GIF_timer/countdown.gif'
        with open(gif_path, 'rb') as gif:
            msg = bot.send_animation(call.message.chat.id, gif)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ –≤—Ä–µ–º—è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
        current_questions = read_current_questions(user_id)
        current_questions["timer_message_id"] = msg.message_id
        current_questions["timer_start_time"] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        write_current_questions(user_id, current_questions)



        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        threading.Thread(target=remove_timer_message, args=(call.message.chat.id, msg.message_id)).start()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        if current_questions["questions"][key]:
            question_to_send = random.choice(current_questions["questions"][key])
            question_id, question_text = question_to_send
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            skip_button_key = f'skip_question_{topic_index}' if topic_index != "all" else 'skip_question_all'
            see_answer_key = f'see_answer_{topic_index}' if topic_index != "all" else 'see_answer_all'

            keyboard = create_inline_keyboard([skip_button_key, see_answer_key, 'menu'])
            bot.send_message(call.message.chat.id, f'–í–æ–ø—Ä–æ—Å:\n\n‚ùì{question_text}\n\n`', reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º question_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            current_questions["last_question_id"] = question_id
            current_questions["last_question_text"] = question_text
            write_current_questions(user_id, current_questions)

            # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
            remove_question_from_all_lists(user_id, question_id)
        else:
            keyboard = create_inline_keyboard(['menu'])
            bot.send_message(call.message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –í–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ "
                                                   "–ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.", reply_markup=keyboard)


    except Exception as e:
        bot.send_message(call.message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@bot.callback_query_handler(func=lambda call: call.data.startswith('see_answer'))
@error_handler
def handle_see_answer(call):
    user_id = call.from_user.id
    today_date = datetime.now().strftime('%Y-%m-%d')

    try:



        topic_index = int(call.data.split('_')[2]) if call.data != 'see_answer_all' else 'all'

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_questions = read_current_questions(user_id)
        current_questions["state"] = "None"
        write_current_questions(user_id, current_questions)

        topic_name = list_of_topics[topic_index] if topic_index != 'all' else 'all'

        current_questions = read_current_questions(user_id)
        question_id = current_questions.get("last_question_id")


        if question_id is None:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É Answers
        tdb.add_skipped_question(user_id, question_id, today_date)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        remove_timer_message_if_needed_for_call(call, user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
        if call.data == 'see_answer_all':
            key = f"all_{user_id}"
            question_topic = "all"
        else:
            topic_id = int(call.data.split('_')[-1])
            question_topic = list_of_topics[topic_id]
            key = f"{question_topic}_{user_id}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        correct_answer = tdb.get_correct_answer(question_id)
        if correct_answer is None:
            # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ —Å –ø–æ–º–æ—â—å—é GPT-3
            question_text = current_questions["last_question_text"]
            correct_answer = question_answer_from_ChatGPT(question_text)




        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        max_length = 4096
        for i in range(0, len(correct_answer), max_length):
            bot.send_message(call.message.chat.id, correct_answer[i:i+max_length])

        next_question_key, next_question_text = create_next_question_button(topic_index)



        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        next_question_button = next_question_key if question_topic != "all" else 'next_question_all'
        keyboard = create_inline_keyboard([next_question_button, 'menu'])
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    except Exception as e:
        bot.send_message(call.message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

@bot.callback_query_handler(func=lambda call: call.data.startswith('next_question'))
@error_handler
def handle_next_question(call):
    user_id = call.from_user.id
    filename = None
    try:

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
        if call.data == 'next_question_all':
            key = f"all_{user_id}"
            topic_name = "all"
            state = "next_question_all"
        else:
            topic_index = int(call.data.split('_')[-1])
            topic_name = list_of_topics[topic_index]
            key = f"{topic_name}_{user_id}"
            state = f"next_question_{topic_index}"

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_questions = read_current_questions(user_id)
        current_questions["state"] = state
        write_current_questions(user_id, current_questions)




        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON —Ñ–∞–π–ª–∞
        current_questions = read_current_questions(user_id)

        if not current_questions["questions"].get(key):
            current_questions["questions"][key] = tdb.get_list_of_10_questions(user_id, topic_name)
            write_current_questions(user_id, current_questions)

        if not current_questions["questions"][key]:
            keyboard = create_inline_keyboard(['menu'])
            bot.send_message(call.message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –í–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ "
                                                   "–ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.", reply_markup=keyboard)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF —Ç–∞–π–º–µ—Ä–∞
        gif_path = 'GIF_timer/countdown.gif'
        with open(gif_path, 'rb') as gif:
            msg = bot.send_animation(call.message.chat.id, gif)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ –≤—Ä–µ–º—è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
        current_questions = read_current_questions(user_id)
        current_questions["timer_message_id"] = msg.message_id
        current_questions["timer_start_time"] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        write_current_questions(user_id, current_questions)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        threading.Thread(target=remove_timer_message, args=(call.message.chat.id, msg.message_id)).start()

        # –í—ã–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_to_send = random.choice(current_questions["questions"][key])
        question_id, question_text = question_to_send
        if topic_name == "all":
            keyboard = create_inline_keyboard(['skip_question_all', 'see_answer_all', 'menu'])
        else:
            skip_button_key, skip_button_text = create_skip_question_button(topic_index)

            see_answer_key, see_answer_text = create_see_answer_button(topic_index)

            keyboard = create_inline_keyboard([skip_button_key, see_answer_key, 'menu'])

        bot.send_message(call.message.chat.id, f'–í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ "{topic_name}":\n\n‚ùì{question_text}\n\n`', reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º question_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_questions["last_question_id"] = question_id
        current_questions["last_question_text"] = question_text
        write_current_questions(user_id, current_questions)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
        remove_question_from_all_lists(user_id, question_id)

    except Exception as e:
        bot.send_message(call.message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

    finally:
        if filename and os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as remove_error:
                bot.send_message(call.message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {remove_error}')


@bot.callback_query_handler(func=lambda call: call.data.startswith('repeat'))
@error_handler
def handle_repeat(call):
    user_id = call.from_user.id

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_questions = read_current_questions(user_id)
    current_questions["state"] = "None"
    write_current_questions(user_id, current_questions)

    data = call.data.split('_')
    if len(data) == 2 and data[1] == 'all':
        # –ü–æ–≤—Ç–æ—Ä –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        tdb.reset_answers_for_user(user_id)
        bot.send_message(call.message.chat.id, '–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')
    elif len(data) == 2:
        # –ü–æ–≤—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ
        topic_index = int(data[1])
        topic_name = list_of_topics[topic_index]
        tdb.reset_answers_for_user(user_id, topic_name)
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        test_button = types.InlineKeyboardButton(text='–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='all_questions')
        choose_button = types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É', callback_data='choose_topic')
        menu_button = types.InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü≤', callback_data='menu')
        keyboard.add(choose_button, test_button,  menu_button)
        bot.send_message(call.message.chat.id, f'–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ "{topic_name}" –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.', reply_markup=keyboard)




#STATISTICS



def get_progress(user_id, list_of_topics):
    statistics = {}

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
    topic_stats = {
        '–¢–µ–º–∞': [],
        '–í–µ—Ä–Ω–æ': [],
        '–í—Å–µ–≥–æ': []
    }

    for topic in list_of_topics:
        correct_answers_count, total_questions_count = tdb.get_correct_answers_count(user_id, topic)
        statistics[topic] = (correct_answers_count, total_questions_count)
        topic_stats['–¢–µ–º–∞'].append(topic)
        topic_stats['–í–µ—Ä–Ω–æ'].append(correct_answers_count)
        topic_stats['–í—Å–µ–≥–æ'].append(total_questions_count)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º
    correct_answers_count_all, total_questions_count_all = tdb.get_correct_answers_count(user_id, "all")
    statistics["all"] = (correct_answers_count_all, total_questions_count_all)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ "–í—Å–µ —Ç–µ–º—ã" –≤ –Ω–∞—á–∞–ª–æ
    topic_stats['–¢–µ–º–∞'].insert(0, '–í—Å–µ —Ç–µ–º—ã')
    topic_stats['–í–µ—Ä–Ω–æ'].insert(0, correct_answers_count_all)
    topic_stats['–í—Å–µ–≥–æ'].insert(0, total_questions_count_all)

    topics_df = pd.DataFrame(topic_stats)
    return topics_df

def create_progress_image(df):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    tema_width = 0.7  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ "–¢–µ–º–∞"
    correctly_width = 0.25  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ "–í–µ—Ä–Ω–æ"
    total_width = 0.25  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ "–í—Å–µ–≥–æ"
    header_height = 0.08  # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –æ–±—â–µ–π –≤—ã—Å–æ—Ç—ã

    fig, ax = plt.subplots(figsize=(8, len(df) * 0.5 + 1))
    fig.patch.set_facecolor('#6C3483')  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –¥–ª—è –≤—Å–µ–π —Ñ–∏–≥—É—Ä—ã
    ax.axis('tight')
    ax.axis('off')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    table = ax.table(cellText=df.values, colLabels=df.columns, cellLoc='center', loc='center')

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–∞ –∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫
    table.auto_set_font_size(False)
    table.set_fontsize(14)

    # –†–∞—Å–∫—Ä–∞—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    colors = ['#6C3483', '#F0FFBF', '#D3D3D3']  # –¶–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫: —á–µ—Ä–Ω—ã–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π, –∑–µ–ª–µ–Ω—ã–π #ABEBC6
    text_colors = ['#FFFFFF', '#000000', '#000000']  # –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞: –±–µ–ª—ã–π, –±–µ–ª—ã–π, —á–µ—Ä–Ω—ã–π

    for key, cell in table.get_celld().items():
        if key[0] == 0:  # –∑–∞–≥–æ–ª–æ–≤–æ–∫
            cell.set_fontsize(20)
            cell.set_height(header_height)
            cell.set_text_props(weight='bold')  # –°–¥–µ–ª–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º–∏
            cell.set_facecolor(colors[0])
            cell.set_text_props(color=text_colors[0])

        elif key[0] == 1:  # —Å—Ç—Ä–æ–∫–∞ "–í—Å–µ —Ç–µ–º—ã"
            cell.set_facecolor(colors[1])
            cell.set_text_props(color=text_colors[1])
            cell.set_fontsize(20)
            cell.set_height(0.045)
        else:  # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            cell.set_facecolor(colors[2])
            cell.set_text_props(color=text_colors[2])
            cell.set_fontsize(20)
            cell.set_height(0.045)

        if key[1] == 0:  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü "–¢–µ–º–∞"
            cell.set_width(tema_width)
        elif key[1] == 1:  # –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü "–í–µ—Ä–Ω–æ"
            cell.set_width(correctly_width)
        elif key[1] == 2:  # –¢—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü "–í—Å–µ–≥–æ"
            cell.set_width(total_width)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–≤–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
    fig.tight_layout(pad=1.0)

    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    img = Image.open(buf)
    return img

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == 'statistics')
@error_handler
def handle_statistics(call):
    user_id = call.from_user.id
    global list_of_topics
    topics_df = get_progress(user_id, list_of_topics)

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_questions = read_current_questions(user_id)
    current_questions["state"] = "None"
    write_current_questions(user_id, current_questions)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–∞–±–ª–∏—Ü–µ–π
    img = create_progress_image(topics_df)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    buf = io.BytesIO()
    img.save(buf, format='PNG')
    buf.seek(0)
    bot.send_photo(call.message.chat.id, buf, caption="–í–∞—à –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å")

    keyboard = create_inline_keyboard(['detailed_statistics', 'menu'])
    bot.send_message(call.message.chat.id, "–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç'", reply_markup=keyboard)


#STATISTICS TEXT
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
def get_text_progress_report(user_id, list_of_topics):
    report_lines = []

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º
    topics_df = get_progress(user_id, list_of_topics)

    for index, row in topics_df.iterrows():
        topic = row['–¢–µ–º–∞']
        correct = row['–í–µ—Ä–Ω–æ']
        total = row['–í—Å–µ–≥–æ']

        avg_attempts = tdb.get_average_attempts(user_id, topic if topic != '–í—Å–µ —Ç–µ–º—ã' else None)
        last_answer_date = tdb.get_last_answer_date(user_id, topic if topic != '–í—Å–µ —Ç–µ–º—ã' else None)

        correct_week = tdb.get_correct_answers_count_period(user_id, topic if topic != '–í—Å–µ —Ç–µ–º—ã' else None, days=7)
        correct_month = tdb.get_correct_answers_count_period(user_id, topic if topic != '–í—Å–µ —Ç–µ–º—ã' else None, days=30)
        total_attempts_week, total_attempts_month = tdb.get_total_attempts(user_id,
                                                                           topic if topic != '–í—Å–µ —Ç–µ–º—ã' else None)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞ —Å–ª–æ–≤–∞ "—Ä–∞–∑"
        def get_raz_word(count):
            if count % 10 == 1 and count % 100 != 11:
                return "—Ä–∞–∑"
            elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
                return "—Ä–∞–∑–∞"
            else:
                return "—Ä–∞–∑"
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é
        report_lines.append('-' * 32)
        report_lines.append(topic)
        report_lines.append('-' * 32)
        report_lines.append(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é:  {correct_week}")
        report_lines.append(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ –º–µ—Å—è—Ü:  {correct_month}")
        report_lines.append(f"–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:  {correct}")
        report_lines.append(f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ:  {total}")
        report_lines.append(f"–í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ —Å—Ä–µ–¥–Ω–µ–º —Å {avg_attempts} –ø–æ–ø—ã—Ç–∫–∏.")
        report_lines.append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –í—ã –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ {last_answer_date}.")
        report_lines.append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –í—ã –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ {last_answer_date}.")
        report_lines.append(
            f"–ó–∞ –Ω–µ–¥–µ–ª—é –í—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —ç—Ç–æ–π —Ç–µ–º—ã {total_attempts_week} {get_raz_word(total_attempts_week)}, –∞ –∑–∞ –º–µ—Å—è—Ü - {total_attempts_month} {get_raz_word(total_attempts_month)}.")

    return report_lines


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_report_messages(bot, chat_id, report_lines):
    message = ""
    for line in report_lines:
        if len(message) + len(line) > 4000:
            bot.send_message(chat_id, message)
            message = ""
        message += line + "\n"
    if message:
        bot.send_message(chat_id, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == 'detailed_statistics')
def handle_text_report(call):
    user_id = call.from_user.id

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_questions = read_current_questions(user_id)
    current_questions["state"] = "None"
    write_current_questions(user_id, current_questions)

    list_of_topics = tdb.get_all_topics()
    report_lines = get_text_progress_report(user_id, list_of_topics)
    keyboard = create_inline_keyboard(['menu'])
    send_report_messages(bot, call.message.chat.id, report_lines)
    bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                     reply_markup=keyboard)

#REMINDER

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_reminders():

    inactive_users = tdb.get_inactive_users()

    for user_id, last_answer_date in inactive_users:
        days = days_since_last_answer(last_answer_date)
        day_word = get_day_word(days)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        sticker_id = STICKER_CAT  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä–∞
        bot.send_sticker(user_id, sticker_id)

        reminder_text = f"‚ùó‚ùó–ü—Ä–æ—à–ª–æ —É–∂–µ {days} {day_word}, –∫–∞–∫ —Ç—ã –Ω–µ –∏–¥–µ—à—å –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–µ—á—Ç—ã. –î–∞–≤–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?"

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        test_button = types.InlineKeyboardButton(text='‚ùì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='test_mode')
        menu_button = types.InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü≤', callback_data='menu')
        keyboard.add(test_button, menu_button)

        bot.send_message(user_id, reminder_text, reply_markup=keyboard)




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule.every().day.at("14:00").do(send_reminders)


#VOICE


# –í–∞—à API –∫–ª—é—á –¥–ª—è OpenAI
OPENAI_API_KEY = WHISPER_API
client = OpenAI(api_key=OPENAI_API_KEY)


# –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ ffmpeg.exe
#FFMPEG_PATH = "C:\\Users\\buddy\\AppData\\Local\\ffmpeg\\bin\\ffmpeg.exe"
FFMPEG_PATH = "/usr/bin/ffmpeg"
# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
audio_folder = os.path.join(os.path.dirname(__file__), "user_voice_messages")
os.makedirs(audio_folder, exist_ok=True)

#–µ—Å–ª–∏ –ª–∏–Ω—É–∫—Å, —Ç–æ
@error_handler
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    user_id = message.from_user.id
    mp3_file_path = None
    ogg_file_path = None

    try:
        current_questions = read_current_questions(user_id)
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        last_question_text = current_questions.get("last_question_text")
        state = current_questions.get("state")

        if not current_questions.get("state").startswith("None"):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            file_info = bot.get_file(message.voice.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            ogg_file_path = os.path.join(audio_folder, f"voice_message_{user_id}.ogg")
            mp3_file_path = os.path.join(audio_folder, f"voice_message_{user_id}.mp3")

            with open(ogg_file_path, 'wb') as new_file:
                new_file.write(downloaded_file)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏–∑ ogg –≤ mp3
            subprocess.run([FFMPEG_PATH, "-i", ogg_file_path, mp3_file_path], stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE,
                           text=True, timeout=30)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º mp3 —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            with open(mp3_file_path, "rb") as audio_file:
                transcription = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    prompt='C–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ '
                           '–≤–æ–ø—Ä–æ—Å {last_question_text} '
                           '–Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ Python. '
                           ' –°–æ–æ–±—â–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç'
                           ' –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ,'
                           ' —Å–≤—è–∑–∞–Ω–Ω—É—é —Å Python. '
                           '–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. '
                           '–í—Å–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π, '
                           '–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º.'
                    #prompt="The recorded message is in Russian, but it is "
                    #       "a response to interview questions for a Python "
                    #       "programmer position. It includes professional "
                    #       "terminology in English related to Python and HR "
                    #       "for Python programmer candidates. Transcribe this"
                    #       " terminology in English. All words that are not"
                    #       " terminology should be transcribed in Russian."
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.reply_to(message, transcription.text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            remove_timer_message_if_needed_for_message(message, user_id)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            feedback = get_feedback(last_question_text, transcription.text)
            bot.send_message(message.chat.id, feedback)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Answers
            question_id = current_questions.get("last_question_id")
            tdb.update_answer_record(user_id, question_id, feedback)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if state == 'all_questions':
                next_question_button = 'next_question_all'
            elif state.startswith('topic_'):
                topic_index = state.split('_')[1]
                next_question_button = f'next_question_{topic_index}'
            elif state.startswith('skip_question_'):
                topic_index = state.split('_')[2] if state != 'skip_question_all' else 'all'
                next_question_button = f'next_question_{topic_index}' if topic_index != 'all' else 'next_question_all'
            elif state.startswith('next_question_'):
                topic_index = state.split('_')[2] if state != 'next_question_all' else 'all'
                next_question_button = f'next_question_{topic_index}' if topic_index != 'all' else 'next_question_all'
            else:
                next_question_button = 'menu'  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º

            keyboard = create_inline_keyboard([next_question_button, 'menu'])
            bot.send_message(message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º –≤–æ–ø—Ä–æ—Å—ã?", reply_markup=keyboard)


        else:
            keyboard = create_inline_keyboard(['menu'])
            bot.reply_to(message, "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=keyboard)

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –æ—à–∏–±–æ–∫
        bot.reply_to(message, "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        if ogg_file_path and os.path.exists(ogg_file_path):
            os.remove(ogg_file_path)
        if mp3_file_path and os.path.exists(mp3_file_path):
            os.remove(mp3_file_path)

@error_handler
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id

    try:
        current_questions = read_current_questions(user_id)
        last_question_text = current_questions.get("last_question_text")
        state = current_questions.get("state")

        if not current_questions.get("state").startswith("None"):
            user_response = message.text
            feedback = get_feedback(last_question_text, user_response)
            bot.send_message(message.chat.id, feedback)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Answers
            question_id = current_questions.get("last_question_id")
            tdb.update_answer_record(user_id, question_id, feedback)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if state == 'all_questions':
                next_question_button = 'next_question_all'
            elif state.startswith('topic_'):
                topic_index = state.split('_')[1]
                next_question_button = f'next_question_{topic_index}'
            elif state.startswith('skip_question_'):
                topic_index = state.split('_')[2] if state != 'skip_question_all' else 'all'
                next_question_button = f'next_question_{topic_index}' if topic_index != 'all' else 'next_question_all'
            elif state.startswith('next_question_'):
                topic_index = state.split('_')[2] if state != 'next_question_all' else 'all'
                next_question_button = f'next_question_{topic_index}' if topic_index != 'all' else 'next_question_all'
            else:
                next_question_button = 'menu' # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º

            keyboard = create_inline_keyboard([next_question_button, 'menu'])
            bot.send_message(message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º –≤–æ–ø—Ä–æ—Å—ã?", reply_markup=keyboard)
        else:
            keyboard = create_inline_keyboard(['menu'])
            bot.reply_to(message, "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=keyboard)
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_thread = threading.Thread(target=run_schedule)
    schedule_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.polling(none_stop=True)